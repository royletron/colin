{"ts":1369233233686,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"// Subtitles\n//\n// MIT. By Ben Mcmahen.\n//\n// Enjoy.\n\n\n// Our Collections are Global, which kinda stinks.\nVideos = new Meteor.Collection('videos');\nSubtitles = new Meteor.Collection('subtitles');\n\n(function(){\n\n  var root = this\n    , Subtitler = {};\n\n  // Our Backbone Router. It'd be nice to use something\n  // that didn't require backbone since I don't use Backbone\n  // anywhere els.e\n  var Router = Backbone.Router.extend({\n\n    routes : {\n      '': 'home',\n      'reset-password' : 'resetPassword',\n      'library' : 'library',\n      'new-project': 'newProject',\n      'new-project/vimeo' : 'newVimeoProject',\n      'new-project/html' : 'newHTMLProject',\n      'new-project/youtube' : 'newYoutubeProject',\n      'project/:id' : 'project',\n      'help' : 'help',\n      'login' : 'login'\n    },\n\n    home : function() {\n      Session.set('currentView', null);\n      Session.set('overlay', null);\n    },\n\n    login: function(){\n      Session.set('overlay', 'loginForm');\n    },\n\n    resetPassword : function() {\n      Session.set('passwordView', 'password');\n    },\n\n    newProject : function() {\n      Session.set('overlay', 'newVideo');\n      Session.set('videoSource', null);\n    },\n\n    newVimeoProject: function(){\n      Session.set('overlay', 'newVideo');\n      Session.set('videoSource', 'vimeo');\n    },\n\n    newYoutubeProject: function(){\n      Session.set('overlay', 'newVideo');\n      Session.set('videoSource', 'youtube');\n    },\n\n    newHTMLProject: function(){\n      Session.set('overlay', 'newVideo');\n      Session.set('videoSource', 'local');\n    },\n\n    library : function() {\n      if (Meteor.user()) {\n        Session.set('overlay', 'viewLibrary');\n      } else {\n        Session.set('overlay', 'loginForm');\n        Router.navigate('login');\n      }\n    },\n\n    project : function(id) {\n      Session.set('currentView', 'app');\n      Session.set('currentVideo', id);\n    },\n\n    help : function(){\n      Session.set('currentView', 'help');\n    }\n\n  });\n\n  // Create our Router. Another global....\n  root.Router = new Router();\n\n  Meteor.startup(function () {\n    Backbone.history.start({ pushState : true });\n  });\n\n  // The HUGE LIST of Session Variables. There should be a better\n  // way to do this. Consider making a local, reactive model?\n  Session.setDefault('looping', true);\n  Session.setDefault('loopDuration', 5);\n  Session.setDefault('playbackRate', 1);\n  Session.setDefault('videoPlaying', false);\n  Session.setDefault('currentTime', null);\n  Session.setDefault('startTime', 0);\n  Session.setDefault('endTime', null);\n  Session.setDefault('currentVideo', null);\n  Session.setDefault('currentSub', null);\n  Session.setDefault('isLooping', null);\n  Session.setDefault('saving', null);\n  Session.setDefault('currentView', null);\n  Session.setDefault('overlay', null);\n  Session.setDefault('loading', null);\n  Session.setDefault('createProjectFlow', null);\n\n  // Handle the presence of a resetToken separately, since\n  // this doesn't work well with Backbone's router.\n  if (Accounts._resetPasswordToken) {\n    Session.set('overlay', 'loginView');\n    Session.set('resetPassword', Accounts._resetPasswordToken);\n  }\n\n  // Subscriptions.\n  //\n  // Videos.\n  Deps.autorun(function() {\n    if (Meteor.user()) Meteor.subscribe('videos', Meteor.user()._id);\n  });\n\n  // Subtitles.\n  Deps.autorun(function () {\n    var selectedVideo = Session.get('currentVideo');\n    if (selectedVideo) Meteor.subscribe('subtitles', selectedVideo);\n  });\n\n  root.Subtitler = Subtitler;\n\n}).call(this);\n\n\n\n"]],"start1":0,"start2":0,"length1":0,"length2":3515}]],"length":3515}
{"contributors":[],"silentsave":false,"ts":1369233183058,"patch":[[{"diffs":[[0,"d',\n"],[-1,"      'library' : 'library',\n      'new-project': 'newProject',\n      'new-project/vimeo' : 'newVimeoProject',\n      'new-project/html' : 'newHTMLProject',\n      'new-project/youtube' : 'newYoutubeProject',\n      'project/:id' : 'project',\n"],[0,"    "]],"start1":501,"start2":501,"length1":248,"length2":8}]],"length":3275,"saved":false}
{"ts":1369233233729,"patch":[[{"diffs":[[0,".\n\n\n"],[-1,"// Our Collections are Global, which kinda stinks.\nVideos = new Meteor.Collection('videos');\nSubtitles = new Meteor.Collection('subtitles');\n\n"],[0,"(fun"]],"start1":51,"start2":51,"length1":150,"length2":8},{"diffs":[[0,"this"],[-1,"\n    , Subtitler = {};"],[0,"\n\n  "]],"start1":82,"start2":82,"length1":30,"length2":8},{"diffs":[[0,"    "],[-1,"newProject : function() {\n      Session.set('overlay', 'newVideo');\n      Session.set('videoSource', null);\n    },\n\n    newVimeoProject: function(){\n      Session.set('overlay', 'newVideo');\n      Session.set('videoSource', 'vimeo');\n    },\n\n    newYoutubeProject: function(){\n      Session.set('overlay', 'newVideo');\n      Session.set('videoSource', 'youtube');\n    },\n\n    newHTMLProject: function(){\n      Session.set('overlay', 'newVideo');\n      Session.set('videoSource', 'local');\n    },\n\n    library : function() {\n      if (Meteor.user()) {\n        Session.set('overlay', 'viewLibrary');\n      } else {\n        Session.set('overlay', 'loginForm');\n        Router.navigate('login');\n      }\n    },\n\n    project : function(id) {\n      Session.set('currentView', 'app');\n      Session.set('currentVideo', id);\n    },\n\n    help : function(){\n      Session.set('currentView', 'help');\n    }\n\n  });\n\n  // Create our Router. Another global....\n  root.Router = new Router();\n\n  Meteor.startup(function () {\n    Backbone.history.start({ pushState : true });\n  });\n\n  // The HUGE LIST of Session Variables. There should be a better\n  // way to do this. Consider making a local, reactive model?\n  Session.setDefault('looping', true);\n  Session.setDefault('loopDuration', 5);\n  Session.setDefault('playbackRate', 1);\n  Session.setDefault('videoPlaying', false);\n  Session.setDefault('currentTime', null);\n  Session.setDefault('startTime', 0);\n  Session.setDefault('endTime', null);\n  Session.setDefault('currentVideo', null);\n  Session.setDefault('currentSub', null);\n  Session.setDefault('isLooping', null);\n  Session.setDefault('saving', null);\n  Session.setDefault('currentView', null);\n  Session.setDefault('overlay', null);\n  Session.setDefault('loading', null);\n  Session.setDefault('createProjectFlow"],[1,"help : function(){\n      Session.set('currentView', 'help');\n    }\n\n  });\n\n  // Create our Router. Another global....\n  root.Router = new Router();\n\n  Meteor.startup(function () {\n    Backbone.history.start({ pushState : true });\n  });\n\n  // The HUGE LIST of Session Variables. There should be a better\n  // way to do this. Consider making a local, reactive model?\n  Session.setDefault('currentView', null);\n  Session.setDefault('overlay"],[0,"', n"]],"start1":666,"start2":666,"length1":1813,"length2":445},{"diffs":[[0,"  }\n"],[-1,"\n"],[0,"  "],[-1,"// Subscriptions.\n  //\n  // Videos.\n  Deps.autorun(function() {\n    if (Meteor.user()) Meteor.subscribe('videos', Meteor.user()._id);\n  });\n\n  // Subtitles.\n  Deps.autorun(function () {\n    var selectedVideo = Session.get('currentVideo');\n    if (selectedVideo) Meteor.subscribe('subtitles', selectedVideo);\n  });\n\n  root.Subtitler = Subtitler;\n"],[0,"\n})."]],"start1":1372,"start2":1372,"length1":356,"length2":10}]],"length":1397,"saved":false}
{"ts":1369233358435,"patch":[[{"diffs":[[0,", null);"],[1,"\n  Session.setDefault('loading', null);"],[0,"\n\n  // H"]],"start1":1108,"start2":1108,"length1":16,"length2":55},{"diffs":[[0,"n);\n  }\n"],[-1,"  "],[0,"\n}).call"]],"start1":1407,"start2":1407,"length1":18,"length2":16}]],"length":1434,"saved":false}
{"ts":1369233736323,"patch":[[{"diffs":[[0,"'home',\n"],[1,"      'collection': 'collection',\n"],[0,"      'r"]],"start1":291,"start2":291,"length1":16,"length2":50}]],"length":1468,"saved":false}
